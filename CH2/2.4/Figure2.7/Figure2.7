
/**
 * using divide and conquer to get the 
 * maximum subsequence sum
 */


static int
MaxSubSum (const int A[], int l, int r)
{
	int MaxLeftSum, MaxRightSum;
	int MaxLeftBorderSum, MaxRightBorderSum;
	int LeftBorderSum, RightBorderSum, Center;

	if (l == r)
	{
		if (A[l] >= 0)
			return A[l];
		else
			return 0;
	}
	
	Center = (l+r)/2;
	MaxLeftSum = MaxSubSum(A, l, Center);
	MaxRightSUm = MaxSubSum(A, Center+1, r);

	MaxLeftBorderSum = 0;
	LeftBorderSum = 0;
	for (int i = Center; i >= l; i--) // first time i typed l to be 0
	{
		LeftBorderSum += A[i];
		if (LeftBorderSum > MaxLeftBorderSum)
			MaxLeftBorderSum = LeftBorderSum;
	}

	MaxRightBorderSum = 0;
	RightBorderSum = 0;
	for (int i = Center+1; i <= r; i++)
	{
		RightBorderSum += A[i];
		if (RightBorderSum > MaxRightBorderSum)
			MaxRightBorderSum = RightBorderSum;
	}

	return Max3(MaxLeftSum, MaxRightSum,
			MaxLeftBorderSum+MaxRightBorderSum);

}

int MaxSubsequenceSum(const int A[], int N)
{
	return MaxSubSum(A, 0, N-1);
}

	



